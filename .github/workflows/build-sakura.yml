name: build sakura

on:
  push:
    paths-ignore:
      - '**.md'
      - .gitignore
      - .editorconfig
      - 'ci/**'
      - '*.yml'

  pull_request:
    paths-ignore:
      - '**.md'
      - .gitignore
      - .editorconfig
      - 'ci/**'
      - '*.yml'

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CMD_OCC: '"C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe"'
  PR_NUMBER: ${{ github.event.number }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check:
    name: CheckEncoding
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: CheckEncoding
      run: |
        pip install chardet --user
        py checkEncoding.py

  build:
    # The type of runner that the job will run on
    name: MSBuild
    needs: check
    runs-on: windows-latest

    strategy:
      matrix:
        platform:
          - Win32
          - x64
        config:
          - Debug
          - Release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    ## see https://github.com/actions/checkout
    - uses: actions/checkout@v2

    ## see https://github.com/microsoft/setup-msbuild
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: MSBuild
      run: build-sln.bat ${{ matrix.platform }} ${{ matrix.config }}
      shell: cmd

    - name: Run Tests
      run: ${{ matrix.platform }}\${{ matrix.config }}\tests1.exe
        --gtest_output=xml:tests1-googletest-${{ matrix.platform }}-${{ matrix.config }}.xml

    - name: Upload Bin
      if: ${{ matrix.config == 'Release' }}
      uses: actions/upload-artifact@v2
      with:
        name: sakura-Bin-${{ matrix.platform }}
        path: |
          ${{ matrix.platform }}\${{ matrix.config }}\sakura.exe
          ${{ matrix.platform }}\${{ matrix.config }}\sakura_lang_en_US.dll

  buildChm:
    name: BuildChm
    needs: check
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install Locale Emulator
      run: choco install locale-emulator -y

    - name: Build HTML Help
      shell: cmd
      run: build-chm.bat

    - name: Copy Outputs
      run: |
        Copy-Item help\macro\macro.chm   help\
        Copy-Item help\plugin\plugin.chm help\
        Copy-Item help\sakura\sakura.chm help\

    - name: Upload HTML Help
      uses: actions/upload-artifact@v2
      with:
        name: sakura-Chm
        path: |
          help\macro.chm
          help\plugin.chm
          help\sakura.chm

  mingw:
    name: Build with MinGW
    needs: check
    runs-on: windows-latest

    strategy:
      matrix:
        platform:
          - MinGW
        config:
          - Debug
          - Release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    ## see https://github.com/actions/checkout
    - uses: actions/checkout@v2

    - name: install MinGW-w64-gtest
      run: C:\msys64\usr\bin\bash --login -c "pacman -S --noconfirm mingw-w64-x86_64-gtest"

    - name: Run Batch File
      run: tests\build-and-test.bat ${{ matrix.platform }} ${{ matrix.config }}
      shell: cmd

    - name: Upload MinGW
      if: ${{ matrix.config == 'Release' }}
      uses: actions/upload-artifact@v2
      with:
        name: sakura-MinGW-Bin
        path: sakura_core\sakura.exe

  package:
    name: BuildInstaller
    needs: [build, buildChm, mingw]
    runs-on: windows-latest

    strategy:
      matrix:
        platform:
          - Win32
          - x64
        config:
          - Release

    steps:
    - uses: actions/checkout@v2

    - name: Create Installer work directory
      run: |
        Move-Item -Path installer\sinst_src -Destination installer\sakura
        New-Item -Path installer\bregonig -ItemType Directory
        New-Item -Path installer\ctags    -ItemType Directory
        New-Item -Path installer\sakura\license\bregonig -ItemType Directory
        New-Item -Path installer\sakura\license\ctags    -ItemType Directory
        7z x -oinstaller\bregonig installer\externals\bregonig\bron420.zip
        Move-Item -Path installer\bregonig\*.txt -Destination installer\sakura\license\bregonig\
        Move-Item -Path LICENSE -Destination installer\sakura\license\LICENSE

    - name: Prepare install stuff for x86
      if: ${{ matrix.platform == 'Win32' }}
      run: |
        Move-Item -Path installer\bregonig\*.dll -Destination installer\sakura\
        7z x -oinstaller\ctags installer\externals\universal-ctags\ctags-2020-01-12_feffe43a-x86.zip
        Move-Item -Path installer\ctags\license\* -Destination installer\sakura\license\ctags\
        Move-Item -Path installer\ctags\ctags.exe -Destination installer\sakura\

    - name: Prepare install stuff for x64
      if: ${{ matrix.platform == 'x64' }}
      run: |
        Move-Item -Path installer\bregonig\x64\*.dll -Destination installer\sakura\
        7z x -oinstaller\ctags installer\externals\universal-ctags\ctags-2020-01-12_feffe43a-x64.zip
        Move-Item -Path installer\ctags\license\* -Destination installer\sakura\license\ctags\
        Move-Item -Path installer\ctags\ctags.exe -Destination installer\sakura\

    - name: Download Bin
      uses: actions/download-artifact@v2
      with:
        name: sakura-Bin-${{ matrix.platform }}
        path: installer\sakura\

    - name: Download HTML Help
      uses: actions/download-artifact@v2
      with:
        name: sakura-Chm
        path: installer\sakura\

    - name: 'Build Installer'
      run: ISCC.exe installer\sakura-${{ matrix.platform }}.iss

    - name: Upload Installer for Preview
      if: ${{ matrix.platform == 'x64' }}
      uses: actions/upload-artifact@v2
      with:
        name: sakura-installer-x64
        path: installer\Output-x64\*.exe

    - name: Upload Installer
      if: ${{ matrix.platform == 'Win32' }}
      uses: actions/upload-artifact@v2
      with:
        name: sakura-installer-x86
        path: installer\Output-Win32\*.exe

  sonar:
    name: 'Analyze with SonarCloud'
    needs: check
    runs-on: windows-latest
    env:
      BUILD_PLATFORM: x64
      BUILD_CONFIGURATION: Release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: 'checkout'
      uses: actions/checkout@v2

    - name: 'Add msbuild to PATH'
      uses: microsoft/setup-msbuild@v1

    - name: Prepare Build-Wrapper
      working-directory: ${{ runner.temp }}
      run: |
        Invoke-WebRequest -OutFile build-wrapper-win-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-win-x86.zip
        7z x build-wrapper-win-x86.zip
        echo "SONAR_ORGANIZATION=${{ github.repository_owner }}" >> $env:GITHUB_ENV
        echo "SONAR_PROJECTKEY=$('${{ github.repository }}' -replace '/', '_')" >> $env:GITHUB_ENV

    - name: Build with Build-Wrapper
      run: ${{ runner.temp }}\build-wrapper-win-x86\build-wrapper-win-x86-64.exe --out-dir bw-output MsBuild.exe /p:Platform=$env:BUILD_PLATFORM,Configuration=$env:BUILD_CONFIGURATION /t:ReBuild

    - name: 'Install OpenCppCoverage with XmlExporter'
      working-directory: ${{ runner.temp }}
      run: |
        choco install OpenCppCoverage -y
        RefreshEnv
        Invoke-WebRequest -OutFile XmlExporter-x64.zip https://github.com/berryzplus/XmlExporter/releases/download/v1.0.0/XmlExporter-x64.zip
        7z e XmlExporter-x64.zip
        Move-Item -Path XmlExporter.dll -Destination "C:\Program Files\OpenCppCoverage\Plugins\Exporter\xml.dll"

    - name: Run Tests
      shell: cmd
      run: ${{ env.CMD_OCC }}
        --export_type xml:tests1-coverage-${{ env.BUILD_PLATFORM }}-${{ env.BUILD_CONFIGURATION }}.xml
        --modules ${{ github.workspace }}\${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\tests1.exe
        --sources ${{ github.workspace }}
        --excluded_sources ${{ github.workspace }}\build
        --excluded_sources ${{ github.workspace }}\tests
        --working_dir ${{ github.workspace }}\${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}
        --cover_children
        --
        ${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\tests1.exe
        --gtest_output=xml:tests1-googletest-${{ env.BUILD_PLATFORM }}-${{ env.BUILD_CONFIGURATION }}.xml

    - name: Run Grep
      shell: cmd
      run: ${{ env.CMD_OCC }}
        --export_type xml:grep-coverage-${{ env.BUILD_PLATFORM }}-${{ env.BUILD_CONFIGURATION }}.xml
        --modules ${{ github.workspace }}\${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\tests1.exe
        --sources ${{ github.workspace }}
        --excluded_sources ${{ github.workspace }}\build
        --excluded_sources ${{ github.workspace }}\tests
        --working_dir ${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}
        --cover_children
        --
        ${{ env.BUILD_PLATFORM }}\${{ env.BUILD_CONFIGURATION }}\tests1.exe
        -PROF=""
        -GREPMODE
        -GKEY="\);"
        -GFILE="*.h;*.cpp;#.git;#.svn;#.vs;#googletest;#build;#Release"
        -GFOLDER="${{ github.workspace }}"
        -GCODE=99
        -GOPT=1RSPU

    - name: 'Set up JDK 11'
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Cache SonarCloud packages
      uses: actions/cache@v2
      with:
        path: ~\.sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: 'Fetch SonarScannerCLI'
      working-directory: ${{ runner.temp }}
      run: |
        Invoke-WebRequest -OutFile sonar-scanner-cli-4.4.0.2170-windows.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-windows.zip
        7z x sonar-scanner-cli-4.4.0.2170-windows.zip

    - name: Cache SonarCloud scanner
      uses: actions/cache@v2
      with:
        path: ${{ runner.temp }}\sonar-scanner-cli-4.4.0.2170-windows
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Cache SonarCloud scanner cache
      uses: actions/cache@v2
      with:
        path: ${{ runner.temp }}\sonar-scanner-cache
        key: ${{ runner.os }}-sonar-scanner-cache
        restore-keys: ${{ runner.os }}-sonar-scanner-cache

    - name: 'Analyze with SonarScannerCLI'
      if: ${{ env.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: cmd
      run: ${{ runner.temp }}\sonar-scanner-4.4.0.2170-windows\bin\sonar-scanner.bat
        -D"sonar.organization=${{ env.SONAR_ORGANIZATION }}"
        -D"sonar.projectKey=${{ env.SONAR_PROJECTKEY }}"
        -D"sonar.host.url=https://sonarcloud.io"
        -D"sonar.sourceEncoding=UTF-8"
        -D"sonar.sources=sakura_core,tests,tools"
        -D"sonar.cfamily.build-wrapper-output=bw-output"
        -D"sonar.cfamily.cache.enabled=true"
        -D"sonar.cfamily.cache.path=${{ runner.temp }}\sonar-scanner-cache"
        -D"sonar.cfamily.threads=2"
        -D"sonar.coverageReportPaths=tests1-coverage-${{ env.BUILD_PLATFORM }}-${{ env.BUILD_CONFIGURATION }}.xml,grep-coverage-${{ env.BUILD_PLATFORM }}-${{ env.BUILD_CONFIGURATION }}.xml"
